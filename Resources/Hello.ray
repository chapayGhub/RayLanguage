#include <stdio.h>

typedef struct SomeType {
    int a;
} SomeType;

class BaseHello {
properties:
    string helloString; // by default is readonly getter
methods:
    getter(helloString) { //inline if in interface
        return object.helloString + "getter";
    }
    setter(helloString);
}

implementation BaseHello {
    setter(helloString) {
        object.helloString = argument;
    }
}

class Hello disciple of BaseHello {
properties:
    readonly int a;
    copy uint b;          // getter returns copy
    read, write double d;
    inner SomeType c;

methods:
    Hello initWithType: Type type;
    void sayHelloTo: String name, Object identifier, int a;

static:
    operator(+) {
        return left.a + right.a;
    }

    operator(-) {
        return left.a - right.a;
    }

    operator(++) postfix {
        // has only left operand
        return left.a++;
    }

    operator(++) prefix {
        // has only right operand
        return ++right.b;
    }

    Type getBasicType {
        Type some;
        return some;
    }
}

implementation Hello {
    Hello initWithType: Type type {
        //some here
    }
}

void main() {
    Hello *obj = create 20 Hello;
    obj.initWithType: Hello.getBasicType;
    obj.sayHelloTo: "some string", 5, 2;

    for(Hello temp in obj) {

    }


    delete obj;
    return 0;
}